/*************************************************************************
+Author   : chenhuijia@deepglint.com
+Data     : 2020-03-15
+************************************************************************/

package hamming

// 最容易想到的方法是: 直接把目标数转化成二进制数，然后遍历每一位看看是不是 1
// 如果是 1 就记录下来。
// 那么问题就转换成了: 如何判断二进制数位是否为 1.
// 利用 & 运算特性, 可知只有 1&1 才等于 1, 所以可以利用一个 mask 数字来判断,
// 从最小的数字 1 开始与目标数字进行 & 运算, 每运算一次如果结果不是 0 则记录,
// 然后将数字不断左移并记录结果.
func HammingWeight(n int) int {
	if n <= 0 {
		return -1
	}

	res := 0
	mask := 1

	for i := 0; i < 32; i++ {
		if mask&n != 0 {
			res++
		}

		mask <<= 1
	}

	return res
}
